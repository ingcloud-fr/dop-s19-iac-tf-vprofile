name: "Vprofile_IAC"
on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
      - .github/workflows/** # pour que le workflow se déclenche aussi quand on ne modifie que le workflow
  pull_request:
    branches:
      - main
    paths:
      - terraform/**
      - .github/workflows/** # pour que le workflow se déclenche aussi quand on ne modifie que le workflow

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: eu-west-3
  EKS_CLUSTER: vprofile-eks # cf variables.tf

jobs:
  terraform:
    name: "Apply terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
           terraform_version: 1.6.3 # Faire un essai avec 1.9.6

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform format check
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name : Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile # il peut y avoir des bugs de parallélisme donc 1 seul
      
      ## On a besoin d'un ingress controlleur dans le cluster EKS, donc on l'installe
      # On configure les credentials AWS
      - name: Configure AWS credentials
        id: awscreds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      # Pour avoir la commande kubectl dans l'étape ingress
      - name: Get Kube config file
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
      # On installe l'ingress 
      - name: Install Ingress controler
        id: ingress
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: kubectl apply -f https://rwa.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml
